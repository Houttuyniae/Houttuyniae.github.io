(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{347:function(r,e,t){"use strict";t.r(e);var a=t(0),s=Object(a.a)({},(function(){var r=this,e=r.$createElement,t=r._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[r._v("#")]),r._v(" 介绍")]),r._v(" "),t("h2",{attrs:{id:"docker-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-是什么"}},[r._v("#")]),r._v(" docker 是什么?")]),r._v(" "),t("p",[r._v("Docker 是一个开源的容器引擎，它有助于更快地交付应用。 Docker 可将应用程序和基础设施层隔离，并且能将基础设施当作程序一样进行管理。使用 Docker 可更快地打包、测试以及部署应用程序，并可以缩短从编写到部署运行代码的周期。")]),r._v(" "),t("h2",{attrs:{id:"为什么用-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么用-docker"}},[r._v("#")]),r._v(" 为什么用 docker")]),r._v(" "),t("h3",{attrs:{id:"更高效的利用系统资源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更高效的利用系统资源"}},[r._v("#")]),r._v(" 更高效的利用系统资源")]),r._v(" "),t("p",[r._v("由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。")]),r._v(" "),t("h3",{attrs:{id:"更快速的启动时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更快速的启动时间"}},[r._v("#")]),r._v(" 更快速的启动时间")]),r._v(" "),t("p",[r._v("传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。")]),r._v(" "),t("h3",{attrs:{id:"一致的运行环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一致的运行环境"}},[r._v("#")]),r._v(" 一致的运行环境")]),r._v(" "),t("p",[r._v("开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题。")]),r._v(" "),t("h3",{attrs:{id:"持续交付和部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#持续交付和部署"}},[r._v("#")]),r._v(" 持续交付和部署")]),r._v(" "),t("p",[r._v("对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。")]),r._v(" "),t("p",[r._v("使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合 持续集成(Continuous Integration) 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment) 系统进行自动部署。")]),r._v(" "),t("p",[r._v("而且使用 Dockerfile 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像")]),r._v(" "),t("h2",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[r._v("#")]),r._v(" 基本概念")]),r._v(" "),t("h3",{attrs:{id:"docker-daemon-docker-守护进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-daemon-docker-守护进程"}},[r._v("#")]),r._v(" Docker daemon(Docker 守护进程)")]),r._v(" "),t("p",[r._v("Docker daemon 是一个运行在宿主机（ DOCKER-HOST）的后台进程。可通过 Docker 客户端与之通信。")]),r._v(" "),t("h3",{attrs:{id:"client-docker-客户端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#client-docker-客户端"}},[r._v("#")]),r._v(" Client(Docker 客户端)")]),r._v(" "),t("p",[r._v("Docker 客户端是 Docker 的用户界面，它可以接受用户命令和配置标识，并与 Docker daemon 通信。图中， docker build 等都是 Docker 的相关命令。")]),r._v(" "),t("h3",{attrs:{id:"image-镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#image-镜像"}},[r._v("#")]),r._v(" Image(镜像)")]),r._v(" "),t("p",[r._v("Docker 镜像是一个只读模板，它包含创建 Docker 容器的说明。它和系统安装光盘有点像，使用系统安装光盘可以安装系统，同理，使用 Docker 镜像可以运行 Docker 镜像中的程序。")]),r._v(" "),t("h3",{attrs:{id:"container-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#container-容器"}},[r._v("#")]),r._v(" Container(容器)")]),r._v(" "),t("p",[r._v("容器是镜像的可运行实例。镜像和容器的关系有点类似于面向对象中，类和对象的关系。可通过 Docker API 或者 CLI 命令来启停、移动、删除容器。")]),r._v(" "),t("p",[r._v("也可以把容器看做是一个简易版的 Linux 环境（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。")]),r._v(" "),t("h3",{attrs:{id:"registry-仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#registry-仓库"}},[r._v("#")]),r._v(" Registry(仓库)")]),r._v(" "),t("p",[r._v("Docker Registry 是一个集中存储与分发镜像的服务。构建完 Docker 镜像后，就可在当前宿主机上运行。但如果想要在其他机器上运行这个镜像，就需要手动复制。此时可借助 Docker Registry 来避免镜像的手动复制。")]),r._v(" "),t("p",[r._v("一个 Docker Registry 可包含多个 Docker 仓库，每个仓库可包含多个镜像标签，每个标签对应一个 Docker 镜像。这跟 Maven 的仓库有点类似，如果把 Docker Registry 比作 Maven 仓库的话，那么 Docker 仓库就可理解为某 jar 包的路径，而镜像标签则可理解为 jar 包的版本号。")])])}),[],!1,null,null,null);e.default=s.exports}}]);